package swapper.intentions.tropical.module.exploit;

import java.util.ArrayList;
import java.util.LinkedList;

import com.google.common.eventbus.Subscribe;

import io.netty.util.internal.ThreadLocalRandom;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.status.client.C01PacketPing;
import net.minecraft.util.BlockPos;
import swapper.intentions.tropical.event.PacketDirection;
import swapper.intentions.tropical.event.impl.PacketEvent;
import swapper.intentions.tropical.event.impl.UpdateEvent;
import swapper.intentions.tropical.module.Module;
import swapper.intentions.tropical.settings.settings.ModeSetting;
import swapper.intentions.tropical.utils.PacketUtil;
import swapper.intentions.tropical.utils.TimerUtils;

public class Disabler extends Module {
	public ModeSetting mode = new ModeSetting("Mode", "Ghostly", "Matrix 1.17", "Hypixel", "Verus Semi", "BWP", "BlocksMC", "AcentraWeird", "DEV");
	public TimerUtils timer = new TimerUtils();
	public LinkedList<Packet> packets = new LinkedList<>();
	
	public Disabler() {
		super("Disabler", "disables anticheats", 0x0, Category.EXPLOIT);
		addSettings(mode);
	}

	@Override
	protected void onEnable() {
		// TODO Auto-generated method stub
		
	}
	
	@Subscribe
	public void onUpdate(UpdateEvent e) {
		setSuffix(mode.getCurrentValue());
		switch(mode.getCurrentValue()) {
			case "Ghostly": {
				mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C0CPacketInput(Integer.MAX_VALUE, Integer.MAX_VALUE, false, false));
				break;
			}
			case "Verus Semi":
				if (timer.hasReached(120)) {
					while (!packets.isEmpty()) {
						PacketUtil.sendPacketNoEvent(packets.poll());
					}
					timer.reset();
				}
				break;
			case "AcentraWeird":
				if(mc.thePlayer == null)
					return;
				if(!e.isPre()) {
					if (mc.thePlayer.ticksExisted % 11 == 0) {
						PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 78.4F, mc.thePlayer.posZ, true));
						mc.timer.timerSpeed = 0.5f;
					}else {
						mc.timer.timerSpeed = 1.0f;
					}
				}
				break;
			case "Hypixel":
				if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 7)
					mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
			case "BWP":
				if (mc.thePlayer.ticksExisted == 40)
					mc.thePlayer.setPosition(mc.thePlayer.posX, Math.floor(mc.thePlayer.posY) - 0.0025, mc.thePlayer.posZ);
				break;
			case "BlocksMC":
				if (mc.thePlayer.ticksExisted % 41 == 0) {
					PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 14.72, mc.thePlayer.posZ, true));
				}
				break;
		}
	}
	
	@Subscribe
	public void onPacket(PacketEvent event) {
		switch(mode.getCurrentValue()) {
			case "Matrix 1.17": {
				if (event.getPacket() instanceof C03PacketPlayer) {
	                C03PacketPlayer packetPlayer = event.getPacket();
	                double x = mc.thePlayer.posX;
	                double y = mc.thePlayer.posY;
	                double z = mc.thePlayer.posZ;
	                float yaw = mc.thePlayer.rotationYaw;
	                float pitch = mc.thePlayer.rotationPitch;
	                if (packetPlayer.isMoving()) {
	                    x = packetPlayer.getPositionX();
	                    y = packetPlayer.getPositionY();
	                    z = packetPlayer.getPositionZ();
	                }
	                if (packetPlayer.getRotating()) {
	                    yaw = packetPlayer.getYaw();
	                    pitch = packetPlayer.getPitch();
	                }
	                PacketUtil.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(BlockPos.ORIGIN, 134, null, 0, 0, 0));
	                System.out.println("Sex");
	                event.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, packetPlayer.isOnGround()));
	            }
				break;
			}
			case "Hypixel": {
				if (event.getPacket() instanceof C03PacketPlayer && mc.thePlayer.ticksExisted < 80) {
					event.setCancelled(true);
				}
				if(event.getPacket() instanceof C0BPacketEntityAction) {
					event.setCancelled(true);
				}
				if(event.getPacketDirection() == PacketDirection.OUTBOUND && mc.getNetHandler().doneLoadingTerrain) {
					if(!event.isCancelled() && (event.getPacket() instanceof C03PacketPlayer || event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive)) {
						event.setCancelled(true);
						packets.add(event.getPacket());
					}

					if (timer.hasReached(120)) {
						while (!packets.isEmpty()) {
							Packet p = packets.poll();
							if(p instanceof C03PacketPlayer)
								PacketUtil.sendPacketNoEvent(p);
							else
								PacketUtil.sendPacketNoEventDelayed(p, 5L);
						}
						timer.reset();
					}
				}
				break;
			}
			case "DEV": {
				if(event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
					event.setCancelled(true);
					PacketUtil.sendPacketNoEventDelayed(event.getPacket(), 860L);
				}
				if(event.getPacket() instanceof C0BPacketEntityAction) {
					event.setCancelled(true);
				}
				break;
			}
			case "AcentraWeird": {
				if(event.getPacket() instanceof C0FPacketConfirmTransaction) {
					event.setCancelled(true);
					PacketUtil.sendPacketNoEventDelayed(event.getPacket(), 560L);

					PacketUtil.sendPacketNoEvent(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
				}
				if(event.getPacket() instanceof S08PacketPlayerPosLook && mc.getNetHandler().doneLoadingTerrain) {
					S08PacketPlayerPosLook iq = event.getPacket();
					double x = iq.getX(),
							y = iq.getY(),
							z = iq.getZ();
					float yaw = iq.getYaw(),
							pitch = iq.getPitch();
					if(mc.thePlayer.getDistanceSq(x,y,z) < 75) {
						mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, true));
						event.setCancelled(true);
						//mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
					}
				}
				break;
			}
			case "Verus Semi": {
				if(event.getPacketDirection() == PacketDirection.OUTBOUND && mc.getNetHandler().doneLoadingTerrain) {
					if(!event.isCancelled() && (event.getPacket() instanceof C03PacketPlayer || event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive)) {
						event.setCancelled(true);
						packets.add(event.getPacket());
					}
				}
				break;
			}
			case "BlocksMC": {
			 	if(event.getPacket() instanceof C0FPacketConfirmTransaction) {
					event.setCancelled(true);
					PacketUtil.sendPacketNoEventDelayed(event.getPacket(), 9500L);
				}
				break;
			}
			case "BWP": {
				if(event.getPacket() instanceof C00PacketKeepAlive || event.getPacket() instanceof C0FPacketConfirmTransaction) {
					PacketUtil.sendPacketNoEventDelayed(event.getPacket(), 230 + ThreadLocalRandom.current().nextInt(188));
					PacketUtil.sendPacketNoEventDelayed(new C11PacketEnchantItem(-1, -1), 75);
					PacketUtil.sendPacketNoEvent(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
					event.setCancelled(true);
				}

				if(mc.getNetHandler().doneLoadingTerrain && event.getPacket() instanceof C03PacketPlayer && mc.thePlayer.ticksExisted == 7) {
					PacketUtil.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(BlockPos.ORIGIN, 134, null, 0, 0, 0));
					event.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,mc.thePlayer.posY-1.5,mc.thePlayer.posZ,true));
					PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C05PacketPlayerLook(0.0F, 90.02F, false));
				}

				if(mc.thePlayer.ticksExisted < 70 && mc.thePlayer.ticksExisted != 7 && event.getPacket() instanceof C03PacketPlayer) {
					event.setCancelled(true);
				}

				if(event.getPacket() instanceof C03PacketPlayer) {
					C03PacketPlayer packet = event.getPacket();
					double x = mc.thePlayer.posX,
							y = mc.thePlayer.posY,
							z =	mc.thePlayer.posZ;
					float yaw = mc.thePlayer.rotationYaw,
							pitch = 90F;
					if(packet.isMoving()) {
						x = packet.getPositionX();
						y = packet.getPositionY();
						z = packet.getPositionZ();
					}
					if(packet.getRotating()) {
						yaw = packet.getYaw();
						pitch = packet.getPitch() < 90 && !mc.gameSettings.keyBindUseItem.isKeyDown() ? pitch : packet.getPitch();
					}
					//event.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, packet.isOnGround()));
					//mc.thePlayer.renderPitchHead = pitch;
				}
				if(event.getPacket() instanceof C0BPacketEntityAction)
					event.setCancelled(true);
				break;
			}
		}
	}
	
	@Override
	protected void onDisable() {
		// TODO Auto-generated method stub
		
	}
}
